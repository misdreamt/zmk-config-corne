/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BAS_L 0
#define NAV_L 1
#define NUM_L 2
#define SYM_L 3

#define AS(keycode) &as LS(keycode) keycode


/*                KEY POSITIONS

  ╭────────────────────╮ ╭────────────────────╮
  │  0   1   2   3   4 │ │  5   6   7   8   9 │
  │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
  │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
  ╰───────╮ 30  31  32 │ │ 28  29  30 ╭───────╯
          ╰────────────╯ ╰────────────╯            */

/ {
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    chosen {
      zmk,matrix_transform = &five_column_transform;
    };

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// 
// |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U  |  I  |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  |     |  H  |  J  |  K  |  L  |  '  | 
// |  Z  |  X  |  C  |  V  |  B  |     |  N  |  M  |  ,  |  .  |  ?  |
//             | LWR | RSE | SPC |     | BSP | RSE | LWR |
                        display-name = "Base";
                        bindings = <
   &kp Q &kp W &kp E &kp R &kp T         &kp Y    &kp U  &kp I      &kp O    &kp P
   LS(A) LC(S) LA(D) LG(F) &kp G         &kp H    RG(J)  RA(K)      RC(L)    RS(SQT)
   LS(Z) &kp X &kp C &kp V &kp B         &kp N    &kp M  &kp COMMA  &kp DOT  RS(FSLH)
               &mo 1 &mo 2 &kp SPACE     &kp BSPC &mo 2  &mo 1
                        >;
                };

                lower_layer {
// 
// |  !  |  @  |  #  |  $  |  %  |     |  ^  |  &  |  *  |  (  |  )  |
// |     |     |     |     |     |     | LFT | DWN |  UP | RGT |     |
// |     |     |     |     |     |     |     |     |     |     |     |
//             |     |     | SPC |     | ENT | ESC | TAB |
                        display-name = "Lower";
                        bindings = <
   &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT        &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR  &kp RPAR
   &trans  &trans  &trans  &trans  &trans      &kp LEFT  &kp DOWN  &kp UP          &kp RIGHT &trans 
   &trans    &trans       &trans       &trans       &trans           &trans    &trans    &trans          &trans    &trans 
                             &trans      &trans       &kp SPACE        AS(RET)   &kp ESC   &kp TAB
                        >;
                };

                raise_layer {
// 
// | 1!    | 2@  | 3#  | 4$  | 5%  |     |  6^ |  7& |  8* |  9(  |  0)  |
// | |\    | `~  |     |     |     |     |     |     |  =+ |  -_  |  ;:  |
// | BTCLR | BT1 | BT2 | BT3 |     |     |     |     |     |      |      |
//               |     |     | SPC |     | ENT |     | DEL |
                        display-name = "Raise";
                        bindings = <

   AS(N1)     AS(N2)       AS(N3)       AS(N4)       AS(N5)     AS(N6)   AS(N7)   AS(N8)    AS(N9)    AS(N0)
   AS(MINUS)  AS(GRAVE)    &trans       &trans       &trans     &trans   &trans   AS(EQUAL) AS(MINUS) AS(SEMI)
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &trans     &trans   &trans   &trans    &trans    &trans
                           &trans       &trans       &kp SPACE  &kp RET2  &trans  &kp DEL
                        >;
                };
        };
};
 
